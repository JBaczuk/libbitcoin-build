.template 0
###############################################################################
# Copyright (c) 2011-2014 libbitcoin developers (see COPYING).
#
# GSL generate install.sh.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################  

# General repository query functions.

function have_build(install, name)
    define my.install = have_build.install
    return defined(my.install->build(build.name = my.name))
endfunction

function is_archive_match(build, name, system)
    define my.build = is_archive_match.build
    trace1("is_archive_match($(my.name), $(my.system)) : $(my.build.name)")
    return defined(my.build.version) & (my.build.name = my.name) & \
        (!defined(my.system) | (my.build.system = my.system))
endfunction

function get_archive_version(install, name, system)
    trace1("get_archive_version($(my.name), $(my.system))")
    define my.install = get_archive_version.install
    define my.build = my.install->build(is_archive_match(build, my.name,\
        my.system))?
    return defined(my.build) ?? my.build.version
endfunction

# Functions with specific knowledge of archive file name and URL structure.

function get_boost_file(install, system)
    define my.install = get_boost_file.install
    define my.version = get_archive_version(my.install, "boost", my.system)?
    if (!defined(my.version))
        #trace1("get_boost_file:get_archive_version($(my.system)) = []")
        return
    endif
    define my.underscore_version = string.convch(my.version, ".", "_")
    return "boost_$(my.underscore_version).tar.bz2"
endfunction

function get_gmp_file(install, system)
    define my.install = get_gmp_file.install
    define my.version = get_archive_version(my.install, "gmp", my.system)?
    if (!defined(my.version))    
        #trace1("get_gmp_file:get_archive_version($(my.system)) = []")
        return
    endif
    return "gmp-$(my.version).tar.bz2"
endfunction

function get_boost_url(install, system)
    #trace1("get_boost_url($(my.system))")
    define my.install = get_boost_url.install
    define my.version = get_archive_version(my.install, "boost", my.system)?
    if (!defined(my.version))
        #trace1("get_boost_url:get_archive_version($(my.system)) = []")
        return
    endif
    define my.archive = get_boost_file(my.install, my.system)?
    if (!defined(my.archive))
        #trace1("get_boost_url:get_boost_file($(my.system)) = []")
        return
    endif        
    define my.base_url = "http\://sourceforge.net/projects/boost/files/boost"
    define my.url = "$(my.base_url)/$(my.version)/$(my.archive)/download"
    #trace1("get_boost_url = $(my.url)")
    return my.url
endfunction

function get_gmp_url(install, system)
    define my.install = get_gmp_url.install
    define my.base_url = "https\://ftp.gnu.org/gnu/gmp"
    define my.archive = get_gmp_file(my.install, my.system)?
    if (!defined(my.archive))
        #trace1("get_gmp_url:get_gmp_file($(my.system)) = []")
        return
    endif
    define my.url = "$(my.base_url)/$(my.archive)"
    #trace1("get_gmp_url = $(my.url)")
    return my.url
endfunction

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.macro language(interpreter)
#!/bin/$(my.interpreter)
.endmacro # language
.
.macro documentation(repository)
.   define my.repo = documentation.repository
# Script to build and install $(my.repo.name).
#
# Script options:
.   if (have_build(my.repo->install, "gmp"))
# --build-gmp              Builds GMP library.
.   endif
.   if (have_build(my.repo->install, "boost"))
# --build-boost            Builds Boost libraries.
.   endif
# --build-dir=<path>       Location of downloaded and intermediate files.
# --prefix=<absolute-path> Library install location (defaults to /usr/local).
# --disable-shared         Disables shared library builds.
# --disable-static         Disables static library builds.
#
# Verified on Ubuntu 14.04, requires gcc-4.8 or newer.
# Verified on OSX 10.10, using MacPorts and Homebrew repositories, requires
# Apple LLVM version 6.0 (clang-600.0.54) (based on LLVM 3.5svn) or newer.
# This script does not like spaces in the --prefix or --build-dir, sorry.
# Values (e.g. yes|no) in the boolean options are not supported by the script.
# All command line options are passed to 'configure' of each repo, with
# the exception of the --build-<item> options, which are for the script only.
# Depending on the caller's permission to the --prefix or --build-dir
# directory, the script may need to be sudo'd.
.endmacro documentation
.
.macro define_build_directory(repository)
.   define my.repo = define_build_directory.repository
.   heading2("The default build directory.")
BUILD_DIR="$(my.repo.name)-build"

.endmacro # define_build_directory
.
.macro define_boost(install, system)
.   trace1("define_boost($(my.system))")
.   define my.install = define_boost.install
.   define my.url = get_boost_url(my.install, my.system)?
.   if (defined(my.url))
.       heading2("Boost archives for $(my.system).")
BOOST_URL_$(my.SYSTEM)="$(my.url)"
BOOST_ARCHIVE_$(my.SYSTEM)="$(get_boost_file(my.install, my.system))"

.   endif
.endmacro # define_boost
.
.macro define_gmp(install, system)
.   define my.install = define_gmp.install
.   define my.url = get_gmp_url(my.install, my.system)?
.   if (defined(my.url))
.       heading2("GMP archives for $(my.system).")
GMP_URL_$(my.system:upper,c)="$(my.url)"
GMP_ARCHIVE_$(my.system:upper,c)="$(get_gmp_file(my.install, my.system))"

.   endif
.endmacro # define_gmp
.
.macro define_build_options(build)
.   define my.build = define_build_options.build
.   define my.system_name = defined(my.build.system) ??\
        "_$(my.build.SYSTEM)" ? ""
.   define my.show_system = defined(my.build.system) ??\
        " for $(my.build.system)" ? ""
.   heading2("Set $(my.build.name) options$(my.show_system).")
$(my.build.name:upper)_OPTIONS$(my.system_name)=\\
.   for my.build.option as _option
"$(_option.value)"$(!last() ?? "\\")
.   endfor _option

.endmacro # define_build_options
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################
function generate_installer()
for generate.repository by name as _dependency
    define my.out_file = "$(_dependency.name)/install.sh"
    notify(my.out_file)
    output(my.out_file)
    
    language("bash")
    define my.install = _dependency->install
    copyleft(_dependency.name)
    documentation(_dependency)
    
    heading1("Define common values.")
    define_build_directory(_dependency)
    #define_boost(my.install, "linux")
    #define_boost(my.install, "darwin")
    define_gmp(my.install)
    
    heading1("Define build options.")
    for my.install.build as Build where count(Build.option) > 0
         define_build_options(Build)
    endfor Build
    
    close
endfor _dependency
endfunction # generate_installer
.endtemplate




