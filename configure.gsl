.template 0
###############################################################################
# Copyright (c) 2011-2014 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin configure.ac.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

function format_boost_libraries(configure)
    define my.configure = format_boost_libraries.configure
    define my.boost_libraries = ""
    for my.configure.dependency as _dependency\
        where is_boost_lib(_dependency) & !is_true(_dependency.unpublished)
        my.boost_libraries = "$(my.boost_libraries) -l$(_dependency.name)"
    endfor _dependency
    return '"$(trim_left(my.boost_libraries))"'
endfunction

function format_template_files(configure)
    define my.configure = format_template_files.configure
    define my.template_files = ""
    for my.configure.template as _template
        my.template_files = "$(my.template_files) $(_template.name)"
    endfor _template
    return trim_left(my.template_files)
endfunction

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.macro initialize(repository)
.   define my.repo = initialize.repository
# Declare the required version of autoconf.
AC_PREREQ([2.65])

# Process command-line arguments and perform initialization and verification.
AC_INIT([$(my.repo.name)], [$(my.repo.version)], [$(my.repo.email)])

# Do compilation tests.
AC_LANG(C++)

# Specify the temporary directory for build tools.
AC_CONFIG_AUX_DIR([build-aux])

# Specify the directory of additional local Autoconf macros.
AC_CONFIG_MACRO_DIR([m4])

# Run macros for operation of generated Makefiles, enable non-recursive make.
AM_INIT_AUTOMAKE([subdir-objects])

# Enable C and Posix extensions that may be disabled on certain platforms.
AC_USE_SYSTEM_EXTENSIONS

# Enable the archiver.
AM_PROG_AR

# Initialize libtool.
LT_INIT

# Determine C++ compiler to use.
AC_PROG_CXX

# Enable shared libraries if available, and static if they don't conflict.
AC_PROG_LIBTOOL

# Declare using the GNU C library (glibc).
AC_GNU_SOURCE

# Compute the canonical host-system type variable host, including host_os.
AC_CANONICAL_HOST

# Check for baseline language coverage in the compiler for the C++11 standard.
AX_CXX_COMPILE_STDCXX_11([noext], [mandatory])

# Enable silent rules option.
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# Check for pkg-config.
PKG_PROG_PKG_CONFIG

.heading2("Declare environment variables that affect the build.")
AC_ARG_VAR([CC], "C compiler to use, such as gcc or clang")
AC_ARG_VAR([CXX], "C++ compiler to use, such as g++ or clang++")
AC_ARG_VAR([PKG_CONFIG_PATH], "Additional directories for package discovery.")

.endmacro # boilerplate
.
.macro with(option)
.   define my.option = with.option
.   define my.value = defined(my.option.example) ?? "=$(my.option.example)" ? ""
.   define my.symbol = is_true(my.option.unprefixed) ?? "$(my.option.name)" ? "with_$(my.option.name)"
.   define my.output = is_true(my.option.substitute) ?? " and output ${$(my.option.name:c)}" ? ""
.   define my.conditional = is_true(my.option.conditional) ?? " and declare $(my.symbol:upper,c)" ? ""
.   heading2("Implement --with-$(my.option.name)$(my.output)$(my.conditional).")
AC_MSG_CHECKING(--with-$(my.option.name) option)
AC_ARG_WITH([$(my.option.name)],
    AS_HELP_STRING([--with-$(my.option.name)$(my.value)],
        [$(my.option.description)]),
    [$(my.symbol:c)=$withval],
    [$(my.symbol:c)=$(my.option.default)])
AC_MSG_RESULT([$$(my.symbol:c)])
.   if (is_true(substitute))
AC_SUBST([$(my.symbol:c)])
.   endif
.   if (is_true(my.option.conditional))
AM_CONDITIONAL([$(my.symbol:upper,c)], [test x$$(my.symbol:c) != xno])
.   endif

.endmacro # with
.
.macro enable(option)
.   define my.option = enable.option
.   if ((my.option.default <> "yes") & (my.option.default <> "no"))
.       abort "Invalid repository.option.enable value: $(my.option.default)."
.   endif
.   define my.symbol = is_true(my.option.unprefixed) ?? "$(my.option.name)" ? "enable_$(my.option.name)"
.   define my.implement = is_true(inherited) ?? "Inherit" ? "Implement"
.   define my.defines = defined(my.option.define) ?? " and define $(my.option.define:upper,c)" ? ""
.   define my.conditional = is_true(my.option.conditional) ?? " and declare $(my.symbol:upper,c)" ? ""
.   heading2("$(my.implement) --enable-$(my.option.name) option$(my.defines)$(my.conditional).")
.   if (!is_true(my.option.inherited))
AC_MSG_CHECKING(--enable-$(my.option.name) option)
AC_ARG_ENABLE([$(my.option.name)],
    AS_HELP_STRING([--enable-$(my.option.name)],
        [$(my.option.description)]),
    [$(my.symbol:c)=$enableval],
    [$(my.symbol:c)=$(my.option.default)])
AC_MSG_RESULT([$$(my.symbol:c)])
.   endif
.   if (!is_empty(my.option.define))
AS_IF([test x$$(my.symbol:c) != xno], AC_DEFINE([$(my.option.define:upper,c)]))
.   endif
.   if (is_true(my.option.conditional))
AM_CONDITIONAL([$(my.symbol:upper,c)], [test x$$(my.symbol:c) != xno])
.   endif

.endmacro # enable
.
.macro check_package(dependency)
.   define my.dependency = check_package.dependency
.   heading2("Require $(my.dependency.name) of at least version $(my.dependency.version) and output ${$(my.dependency.name)}.")
PKG_CHECK_MODULES([$(my.dependency.name)], [lib$(my.dependency.name) >= $(my.dependency.version)])

.endmacro # check_package
.
.macro check_boost(dependency)
.   define my.dependency = check_boost.dependency
.   define my.show_system = is_empty(my.dependency.system) ?? "" ? " if on $(my.dependency.system)"
.   define my.system_pattern = is_empty(my.dependency.system) ?? "*" ? "*$(my.dependency.system)*"
.   heading2("Require Boost of at least version $(my.dependency.version)$(my.show_system).")
AS_CASE([${host_os}], [$(my.system_pattern)],
    [AX_BOOST_BASE([$(my.dependency.version)], [], [AC_MSG_ERROR(
        [Boost $(my.dependency.version) or later is required but was not found.])])])

.endmacro # check_boost
.
.macro check_boost_lib(dependency)
.   define my.dependency = check_boost_lib.dependency
.   if (defined(my.dependency.with) & defined(my.dependency.enable))
.       abort "Conflicting configure.dependency attributes: enable + with."
.   endif
.   define my.symbol = defined(my.dependency.with) ?? "with_$(my.dependency.with)" ?\
        (defined(my.dependency.enable) ?? "enable_$(my.dependency.enable)" ? "")
.   if (is_empty(my.symbol))
AX_$(my.dependency.name:upper,c)
.   else
AS_IF([test x$$(my.symbol) != xno], [AX_$(my.dependency.name:upper,c)])
.   endif

.endmacro # check_boost_lib
.
.macro check_dependency(dependency)
.   define my.dependency = check_dependency.dependency
.   define my.show_system = is_empty(my.dependency.system) ?? "" ? " if on $(my.dependency.system)"
.   define my.output = is_empty(my.dependency.function) ?? "" ? " and output ${$(my.dependency.name:c)_LIBS}"
.   define my.system_pattern = is_empty(my.dependency.system) ?? "*" ? "*$(my.dependency.system)*"
.   heading2("Require $(my.dependency.name:c)$(my.show_system)$(my.output).")
.
.   if (!is_empty(my.dependency.includes))
AS_CASE([${host_os}], [$(my.system_pattern)], 
    [CPPFLAGS="$CPPFLAGS -I/$(my.dependency.includes)"])
.   endif
.
.   if (!is_empty(my.dependency.header))
AS_CASE([${host_os}], [$(my.system_pattern)], 
    [AC_CHECK_HEADER([$(my.dependency.header)], [],
        [AC_MSG_ERROR([$(my.dependency.name) header is required but was not found.])],-)])
.   endif
.
.   if (!is_empty(my.dependency.libs))
AS_CASE([${host_os}], [$(my.system_pattern)], 
    [LDFLAGS="$LDFLAGS -L$(my.dependency.libs)"])
.   endif
.
.   if (!is_empty(my.dependency.function))
AS_CASE([${host_os}], [$(my.system_pattern)], 
    [AC_CHECK_LIB([$(my.dependency.name)],[$(my.dependency.function)],
        [AC_SUBST([$(my.dependency.name:c)_LIBS], [-l$(my.dependency.name)])],
        [AC_SUBST([$(my.dependency.name:c)_LIBS], [])
            AC_MSG_ERROR([$(my.dependency.name) library is required but was not found.])])])
.   endif

.endmacro # check_lib
.
.macro flag(dependency)
.   define my.dependency = flag.dependency
.   heading2("$(my.dependency.comment)")
.   if (!defined(my.dependency.alternate) & !is_true(my.dependency.link))
AX_CHECK_COMPILE_FLAG([-$(my.dependency.name)],
    [CXXFLAGS="$CXXFLAGS -$(my.dependency.name)"])

.   endif
.
.   if (defined(my.dependency.alternate) & !is_true(my.dependency.link))
AX_CHECK_COMPILE_FLAG([-$(my.dependency.name)],
    [CXXFLAGS="$CXXFLAGS -$(my.dependency.name)"],
    [AX_CHECK_COMPILE_FLAG([-$(my.dependency.alternate)],
        [CXXFLAGS="$CXXFLAGS -$(my.dependency.alternate)"])])

.   endif
.
.   if (!defined(my.dependency.alternate) & is_true(my.dependency.link))
AX_CHECK_COMPILE_FLAG([-$(my.dependency.name)],
    [AX_CHECK_LINK_FLAG([-$(my.dependency.name)],
        [CXXFLAGS="$CXXFLAGS -$(my.dependency.name)"])])

.   endif
.
.   if (defined(my.dependency.alternate) & is_true(my.dependency.link))
.       abort "Conflicting repository.flag attributes: alternate + link."
.   endif
.endmacro # flag
.
.macro output_value(name, value)
.   heading2("Output ${$(my.name)}")
AC_SUBST([$(my.name)], [$(my.value)])

.endmacro # output_value
.
.macro compile(files)
AC_CONFIG_FILES([$(my.files)])
AC_OUTPUT
.endmacro # compile
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################
function generate_configure()
for generate.repository by name as _repository

    define my.out_file = "$(_repository.name)/configure.ac"
    notify(my.out_file)
    output(my.out_file)

    copyleft(_repository.name)
    define my.configure = _repository->configure
    
    heading1("Standard declarations.")
    initialize(_repository)

    heading1("Process options.")
    for my.configure.option as _option
        if (_option.type = "with")
            with(_option)
        elsif (_option.type = "enable")
            enable(_option)
        else
            abort "Invalid repository.option.type value: $(_option.type)."
        endif
    endfor _option

    heading1("Check dependencies.")
    for my.configure.dependency as _dependency
        if (is_boost(_dependency))
            check_boost(_dependency)
        elsif (is_boost_lib(_dependency))
            check_boost_lib(_dependency)
        elsif (is_package(_dependency))
            check_package(_dependency)
        else
            check_dependency(_dependency)
        endif
    endfor _dependency
    output_value("boost_LIBS", format_boost_libraries(my.configure))

    heading1("Set flags.")
    for my.configure.flag as Flag1
        flag(Flag1)
    endfor Flag1
    
    heading1("Process outputs into templates.")
    compile("Makefile $(_repository->package.name).pc $(format_template_files(my.configure))")
    
    close
endfor _repository
endfunction # generate_configure
.endtemplate
