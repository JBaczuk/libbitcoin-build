.template 0
###############################################################################
# Copyright (c) 2011-2014 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin configure.ac.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

function format_boost_libraries(configure)
    define node = format_boost_libraries.configure
    define boost_libraries = ""
    for node.dependency as Dependency where is_boost_lib(Dependency) &\
        !is_true(Dependency.unpublished)
        boost_libraries = "$(boost_libraries:) -l$(Dependency.name:)"
    endfor Dependency
    return trim_left(boost_libraries)
endfunction

function format_template_files(configure)
    define node = format_template_files.configure
    define template_files = ""
    for node.template as Template
        template_files = "$(template_files:) $(Template.name:)"
    endfor Template
    return trim_left(template_files)
endfunction

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.macro initialize(repository)
.   define repo = initialize.repository
# Declare the required version of autoconf.
AC_PREREQ([2.65])

# Process command-line arguments and perform initialization and verification.
AC_INIT([$(repo.name)], [$(repo.version)], [$(repo.email)])

# Do compilation tests.
AC_LANG(C++)

# Specify the temporary directory for build tools.
AC_CONFIG_AUX_DIR([build-aux])

# Specify the directory of additional local Autoconf macros.
AC_CONFIG_MACRO_DIR([m4])

# Run macros for operation of generated Makefiles, enable non-recursive make.
AM_INIT_AUTOMAKE([subdir-objects])

# Enable C and Posix extensions that may be disabled on certain platforms.
AC_USE_SYSTEM_EXTENSIONS

# Enable the archiver.
AM_PROG_AR

# Initialize libtool.
LT_INIT

# Determine C++ compiler to use.
AC_PROG_CXX

# Enable shared libraries if available, and static if they don't conflict.
AC_PROG_LIBTOOL

# Declare using the GNU C library (glibc).
AC_GNU_SOURCE

# Compute the canonical host-system type variable host, including host_os.
AC_CANONICAL_HOST

# Check for baseline language coverage in the compiler for the C++11 standard.
AX_CXX_COMPILE_STDCXX_11([noext], [mandatory])

# Enable silent rules option.
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# Check for pkg-config.
PKG_PROG_PKG_CONFIG

.heading2("Declare environment variables that affect the build.")
AC_ARG_VAR([CC], "C compiler to use, such as gcc or clang")
AC_ARG_VAR([CXX], "C++ compiler to use, such as g++ or clang++")
AC_ARG_VAR([PKG_CONFIG_PATH], "Additional directories for package discovery.")

.endmacro # boilerplate
.
.macro with(option)
.   define node = with.option
.   define value = is_empty(node.example) ?? "" ? "=$(node.example:)"
.   define symbol = is_true(node.unprefixed) ?? "$(name:)" ? "with_$(name:)"
.   define output = is_true(node.substitute) ?? " and output ${$(node.name:c)}" ? ""
.   define cond = is_true(node.conditional) ?? " and declare $(SYMBOL:c)" ? ""
.   heading2("Implement --with-$(node.name:)$(output:)$(cond:).")
AC_MSG_CHECKING(--with-$(node.name:) option)
AC_ARG_WITH([$(node.name:)],
    AS_HELP_STRING([--with-$(node.name:)$(value:)],
        [$(node.description:)]),
    [$(symbol:c)=$withval],
    [$(symbol:c)=$(node.default:)])
AC_MSG_RESULT([$$(symbol:c)])
.   if (is_true(substitute))
AC_SUBST([$(symbol:c)])
.   endif
.   if (is_true(node.conditional))
AM_CONDITIONAL([$(SYMBOL:c)], [test x$$(symbol:c) != xno])
.   endif

.endmacro # with
.
.macro enable(option)
.   define node = enable.option
.   if ((node.default <> "yes") & (node.default <> "no"))
.       abort "Invalid repository.option.enable value: $(node.default:)."
.   endif
.   define symbol = is_true(node.unprefixed) ?? "$(name:)" ? "enable_$(name:)"
.   define implement = is_true(inherited) ?? "Inherit" ? "Implement"
.   define defines = is_empty(node.define) ?? "" ? " and define $(node.DEFINE:c)"
.   define cond = is_true(node.conditional) ?? " and declare $(SYMBOL:c)" ? ""
.   heading2("$(implement:) --enable-$(node.name:) option$(defines:)$(cond:).")
.   if (!is_true(node.inherited))
AC_MSG_CHECKING(--enable-$(node.name:) option)
AC_ARG_ENABLE([$(node.name:)],
    AS_HELP_STRING([--enable-$(node.name:)],
        [$(node.description:)]),
    [$(symbol:c)=$enableval],
    [$(symbol:c)=$(node.default:)])
AC_MSG_RESULT([$$(symbol:c)])
.   endif
.   if (!is_empty(node.define))
AS_IF([test x$$(symbol:c) != xno], AC_DEFINE([$(node.DEFINE:c)]))
.   endif
.   if (is_true(node.conditional))
AM_CONDITIONAL([$(SYMBOL:c)], [test x$$(symbol:c) != xno])
.   endif

.endmacro # enable
.
.macro check_package(dependency)
.   define node = check_package.dependency
.   heading2("Require $(node.name:) of at least version $(node.version:) and output ${$(node.name:)}.")
PKG_CHECK_MODULES([$(node.name:)], [lib$(node.name:) >= $(node.version:)])

.endmacro # check_package
.
.macro check_boost(dependency)
.   define node = check_boost.dependency
.   define show_system = is_empty(node.system) ?? "" ? " if on $(node.system:)"
.   heading2("Require Boost of at least version $(node.version:)$(show_system:).")
.   define system_pattern = is_empty(node.system) ?? "*" ? "*$(node.system:)*"
AS_CASE([${host_os}], [$(system_pattern:)],
    AX_BOOST_BASE([$(node.version:)], [], [AC_MSG_ERROR(
        [Boost $(node.version:) or later is required but was not found.])]))

.endmacro # check_boost
.
.macro check_boost_lib(dependency)
.   define node = check_boost_lib.dependency
.   if (!is_empty(node.with) & !is_empty(node.enable))
.       abort "Conflicting configure.dependency attributes: enable + with."
.   endif
.   define symbol = !is_empty(node.with) ?? "with_$(node.with:)" ?\
        (is_empty(node.enable) ?? "" ? "enable_$(node.enable:)")
.   if (is_empty(symbol))
AX_$(node.NAME:c)
.   else
AS_IF([test x$$(symbol:) != xno], [AX_$(node.NAME:c)])
.   endif

.endmacro # check_boost_lib
.
.macro check_dependency(dependency)
.   define node = check_dependency.dependency
.   define show_system = is_empty(node.system) ?? "" ? " if on $(node.system:)"
.   define out = is_empty(node.function) ?? "" ? " and output ${$(node.name:c)_LIBS}"
.   heading2("Require $(node.name:c)$(show_system:)$(out:).")
.   define system_pattern = is_empty(node.system) ?? "*" ? "*$(node.system:)*"
.
.   if (!is_empty(node.includes))
AS_CASE([${host_os}], [$(system_pattern)], 
    [CPPFLAGS="$CPPFLAGS -I/$(node.includes:)"])
.   endif
.
.   if (!is_empty(node.header))
AS_CASE([${host_os}], [$(system_pattern)], 
    AC_CHECK_HEADER([$(node.header:)], [],
        [AC_MSG_ERROR([$(node.name:) header is required but was not found.])],-)
.   endif
.
.   if (!is_empty(node.libs))
AS_CASE([${host_os}], [$(system_pattern)], 
    [LDFLAGS="$LDFLAGS -L$(node.libs:)"])
.   endif
.
.   if (!is_empty(node.function))
AS_CASE([${host_os}], [$(system_pattern)], 
    AC_CHECK_LIB([$(node.name:)],[$(node.function:)],
        [AC_SUBST([$(node.name:c)_LIBS], [-l$(node.name:)])],
        [AC_SUBST([$(node.name:c)_LIBS], [])
            AC_MSG_ERROR([$(node.name:) library is required but was not found.])])
.   endif

.endmacro # check_lib
.
.macro flag(dependency)
.   define node = flag.dependency
.   heading2("$(node.comment:)")
.   if (is_empty(node.alternate) & !is_true(node.link))
AX_CHECK_COMPILE_FLAG([-$(node.name:)],
    [CXXFLAGS="$CXXFLAGS -$(node.name:)"])

.   endif
.
.   if (!is_empty(node.alternate) & !is_true(node.link))
AX_CHECK_COMPILE_FLAG([-$(node.name:)],
    [CXXFLAGS="$CXXFLAGS -$(node.name:)"],
    AX_CHECK_COMPILE_FLAG([-$(node.alternate:)],
        [CXXFLAGS="$CXXFLAGS -$(node.alternate:)"]))

.   endif
.
.   if (is_empty(node.alternate) & is_true(node.link))
AX_CHECK_COMPILE_FLAG([-$(node.name:)],
    [AX_CHECK_LINK_FLAG([-$(node.name:)],
        [CXXFLAGS="$CXXFLAGS -$(node.name:)])])

.   endif
.
.   if (!is_empty(node.alternate) & is_true(node.link))
.       abort "Conflicting repository.flag attributes: alternate + link."
.   endif
.endmacro # flag
.
.macro output_value(name, value)
.   heading2("Output ${$(my.name:)}")
AC_SUBST([$(my.name:)], [$(my.value:)])

.endmacro # output_value
.
.macro compile(files)
AC_CONFIG_FILES([$(my.files:)])
AC_OUTPUT
.endmacro # compile
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################

for repository by name as Repository

    define out_file = "$(Repository.name:)/configure.ac"
    notify(out_file)
    output(out_file)

    copyleft(Repository.name)
    define configure = Repository->configure
    
    heading1("Standard declarations.")
    initialize(Repository)

    heading1("Process options.")
    for configure.option as Option
        if (Option.type = "with")
            with(Option)
        elsif (Option.type = "enable")
            enable(Option)
        else
            abort "Invalid repository.option.type value: $(Option.type:)."
        endif
    endfor Option

    heading1("Check dependencies.")
    for configure.dependency as Dependency
        if (is_boost(Dependency))
            check_boost(Dependency)
        elsif (is_boost_lib(Dependency))
            check_boost_lib(Dependency)
        elsif (is_package(Dependency))
            check_package(Dependency)
        else
            check_dependency(Dependency)
        endif
    endfor Dependency
    output_value("boost_LIBS", format_boost_libraries(configure))

    heading1("Set flags.")
    for configure.flag as Flag1
        flag(Flag1)
    endfor Flag1
    
    heading1("Process outputs into templates.")
    compile("Makefile.am $(Repository->package.name:).pc $(format_template_files(configure))")
    
endfor Repository
.endtemplate
