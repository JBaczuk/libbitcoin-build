.template 0
###############################################################################
#
#  GSL sandbox, for trying out stuff and documenting issues in GSL.
#
#  This is a code generator built using the iMatix GSL code generation
#  language. See https://github.com/imatix/gsl for details.
#
###############################################################################

function test_assignment_ambiguity()
    test_value = "123"
    return test_value = "should not be this"
endfunction
echo test_assignment_ambiguity()
echo test_value

function test_variable_case_sensitivity()

    # Variables are **always** case insensitive.
    define foo = "Case-sensitive variables!"
    define Foo = "Case-INsensitive variables!"
    
    echo "[gsl].ignorecase = <default>"
    echo "foo"
    echo "default: $(foo)"
    echo "colon:   $(foo:)"
    echo "upper:   $(foo:upper)"
    echo "UPPER:   $(foo:UPPER)"
    echo "lower:   $(foo:lower)"
    echo "LOWER:   $(foo:LOWER)"
    echo "FOO"
    echo "default: $(FOO:)"
    echo "default: $(FOO)"
    
    # This changes only the last test (case mismatch disables default formatting).
    [gsl].ignorecase = 0
    echo "[gsl].ignorecase = 0"
    echo "foo"
    echo "default: $(foo)"
    echo "colon:   $(foo:)"
    echo "upper:   $(foo:upper)"
    echo "UPPER:   $(foo:UPPER)"
    echo "lower:   $(foo:lower)"
    echo "LOWER:   $(foo:LOWER)"
    echo "FOO"
    echo "default: $(FOO:)"
    echo "default: $(FOO)"
    
endfunction
#test_variable_case_sensitivity()

function undefined_assignment()
    if (defined(string.locate("haystack", "hay")))
        echo string.locate("haystack", "hay")
    endif
    if (!defined(string.locate("haystack", "needle")))
        echo -1
    endif
    
    # This is how you do it - a terminating '?'.
    echo string.locate("haystack", "dog")
    #echo defined(defaulted) ?? defaulted ? -1
endfunction
#undefined_assignment()

function case_sensitive_compare()
    if ("abc" = "abc")
        echo "match same lower"
    endif
    if ("ABC" = "ABC")
        echo "match same upper"
    endif
    if ("AbC" = "AbC")
        echo "match same mixed"
    endif
    if ("aBc" = "AbC")
        echo "match opposite"
    endif
endfunction
#case_sensitive_compare()

function hello_world()
    echo "Hello World!"
endfunction
#hello_world()

function echo_twice(text)
    echo my.text
    echo echo_twice.text
endfunction
#echo_twice("Hello World!")

function increment(value)
    return my.value + 1
endfunction
#echo increment(0)

function recursive (N)
    echo my.N
    my.localvar = my.N - 1
    if (my.localvar > 0)
        recursive (my.localvar)
    endif
    echo my.localvar
endfunction
#recursive(3)

function decrementbyref(n)
    $(my.n) = $(my.n) - 1
endfunction
#global.counter=5
#decrementbyref("counter")
#echo global.counter

# Simulate a case where a scope predicate may not return a node.
function defined_if_positive(value)
    if (my.value > 0)
        return my.value
    endif
endfunction
function test_undefined()
    define test1 = 1
    if (defined(test1))
        echo "test1: $(test1)"
    endif
    
    if (!defined(test2))
        echo "test2: undefined"
    endif
    
    if (defined(defined_if_positive(0)))
        echo "test3: $(defined_if_positive(0))"
    else
        echo "test3: undefined"
    endif
    
    if (defined(defined_if_positive(1)))
        echo "test4: $(defined_if_positive(1))"
    else
        echo "test4: undefined"
    endif
    
    # Test4 is the resolution to the break in this idiom,
    # but as a result the function must be executed twice.
    test5 = defined_if_positive(0)
    if (defined(test5))
        echo "test5: $(test5)"
    else
        echo "test5: undefined"
    endif
endfunction
#test_undefined()
#test1: 1
#test2: undefined
#test3: undefined
#test4: 1
#(sandbox.gsl 70) Undefined expression: defined_if_positive(...)

###############################################################################
.endtemplate


