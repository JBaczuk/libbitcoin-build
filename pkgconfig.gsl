.template 0
###############################################################################
# Copyright (c) 2011-2014 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin.pc.in.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

function format_boost_libs(configure)
    define my.configure = format_boost_libs.configure
    return defined(my.configure->dependency(is_boost_lib(dependency))) ??\
        "@boost_LIBS@" ? ""
endfunction

function format_compiler_flags(package)
    define my.package = format_compiler_flags.package
    define my.compiler_flags = ""
    for my.package.cflag as _cflag
        my.compiler_flags = "$(my.compiler_flags) -$(_cflag.value)"
    endfor _cflag
    return trim_left(my.compiler_flags)
endfunction

function format_output_libs(package)
    define my.package = format_output_libs.package
    define my.output_libs = ""
    for my.package.output as _output
        my.output_libs = "$(my.output_libs) -l$(_output.name)"
    endfor _output
    return trim_left(my.output_libs)
endfunction

function format_packages(configure)
    define my.configure = format_packages.configure
    define my.packages = ""
    for my.configure.dependency as _dependency where is_package(_dependency)
        my.packages = \
            "$(my.packages) lib$(_dependency.name) >= $(_dependency.version)"
    endfor _dependency
    return trim_left(my.packages)
endfunction

function format_unpackaged_libs(configure)
    define my.configure = format_unpackaged_libs.configure
    define my.unpackaged_lib = ""
    define my.unpackaged_libs = ""
    for my.configure.dependency as _dependency where is_unpackaged_lib(_dependency)
        my.unpackaged_lib = "@$(_dependency.name)_LIBS@"
        if (!defined(string.locate(my.unpackaged_libs, my.unpackaged_lib)))
            my.unpackaged_libs = "$(my.unpackaged_libs) $(my.unpackaged_lib)"
        endif
    endfor _dependency
    return trim_left(my.unpackaged_libs)
endfunction

###############################################################################
# Generation
###############################################################################
.endtemplate
.template 1
.macro generate_pkgconfig()
.for generate.repository by name as _repository
.   define my.out_file = "$(_repository.name)/$(_repository->package.name).pc.in"
.   notify(my.out_file)
.   output(my.out_file)
.   copyleft(_repository.name)
.   define my.configure = _repository->configure
.   define my.package = _repository->package

prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
includedir=@includedir@

Name: $(_repository->package.name)
Description: $(_repository->package.description)
URL: $(_repository->package.url)
Version: @PACKAGE_VERSION@

# Our dependencies that publish package configuration.
Requires: $(format_packages(my.configure))

# Our own include directory and any other compiler flags we require.
Cflags: -I${includedir} $(format_compiler_flags(my.package))

# Our own lib and any we require that do not publish package configuration.
Libs: -L${libdir} $(format_output_libs(my.package)) $(format_boost_libs(my.configure)) $(format_unpackaged_libs(my.configure))
.   close
.endfor _repository
.endmacro # generate_pkgconfig
.endtemplate