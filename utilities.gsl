.template 0
###############################################################################
# Copyright (c) 2014-2015 libbitcoin developers (see COPYING).
#
# GSL libbitcoin utilities in the 'global' scope.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

# General utilities.

function global.is_empty(value)
    return ((my.value ? "") = "")
endfunction

function global.is_true(value)
    return ((my.value ? "false") = "true")
endfunction

function global.starts_with(text, prefix)
    return string.prefixed(my.text, my.prefix)
endfunction

function global.trim_left(text)
    define my.extracted = ""
    regexp.match("^ +(.*)$", my.text, my.extracted)
    return my.extracted ? ""
endfunction

function global.left(text, length)
    define my.text_length = string.length(my.text)
    my.length = my.length > text_length ?? text_length ? my.length
    return substr(my.text, 0, my.length)
endfunction

function global.right(text, length)
    define my.text_length = string.length(my.text)
    my.length = my.length > text_length ?? text_length ? my.length
    return substr(my.text, my.text_length - my.length, my.length)
endfunction

function global.trim_right(text)
    return string.trim(my.text)
endfunction

function global.trim_both(text)
    return trim_left(string.trim(my.text))
endfunction

function global.require(node, context, attribute)
    if (!defined(require.node))
        abort "Required node undefined for $(my.context).$(my.attribute)."
    endif
    define my.node = require.node
    if (!defined(my.node.$(my.attribute)))
        abort "Required attribute missing: $(my.context).$(my.attribute)"
    endif
endfunction

# Dependency Utilities.

# TODO: need to use function names as a form of namespace identification
# so that the called can see the parameter as "dependency". This will allow
# room for other similarly-named functions over differently-typed arguments.

function global.is_boost_dependency(dependency)
    define my.dependency = is_boost_dependency.dependency
    return my.dependency.name = "boost"
endfunction

function global.is_boost_lib_dependency(dependency)
    define my.dependency = is_boost_lib_dependency.dependency
    return starts_with(my.dependency.name, "boost_")
endfunction

# is_package_dependency
function global.is_package(dependency)
    define my.dependency = is_package.dependency
    return defined(my.dependency.version) &\
        !is_boost_dependency(my.dependency) &\
        !is_boost_lib_dependency(my.dependency)
endfunction

# is_unpackaged_lib_dependency
function global.is_unpackaged_lib(dependency)
    define my.dependency = is_unpackaged_lib.dependency
    return defined(my.dependency.function) &\
        !is_boost_dependency(my.dependency) &\
        !is_boost_lib_dependency(my.dependency)
endfunction

function global.is_optional_dependency(dependency)
    define my.dependency = is_optional_dependency.dependency
    return defined(my.dependency.option)
endfunction

# Build Utilities.

function global.is_gmp_build(build)
    define my.build = is_gmp_build.build
    return my.build.name = "gmp"
endfunction

function global.is_boost_build(build)
    define my.build = is_boost_build.build
    return my.build.name = "boost"
endfunction

function global.is_github_build(build)
    define my.build = is_github_build.build
    return !is_empty(my.build.github)
endfunction


# Debugging utilities.

function global.trace1(text)
    trace(my.text, 1)
endfunction

function global.trace2(text)
    trace(my.text, 2)
endfunction

function global.trace3(text)
    trace(my.text, 3)
endfunction

function global.trace(text, context)
    if ((global.trace ? 0) = my.context ? 1)
        echo defined(my.text) ?? "---> $(my.text)" ? "undefined trace"
    endif
endfunction

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.macro global.notify(filename)
.   echo "Generating $(my.filename)..."
.endmacro
.
.macro global.heading1(text)

# $(my.text)
#==============================================================================
.endmacro heading1
.
.macro global.heading2(text)
# $(my.text)
#------------------------------------------------------------------------------
.endmacro heading2
.
.macro global.heading3(text)
# $(my.text)
.endmacro heading3
.
.macro global.copyleft(name)
###############################################################################
#  Copyright (c) 2014-2015 $(my.name) developers (see COPYING).
#
#         GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY
#
###############################################################################
.endmacro copyleft
.
.macro global.c_copyleft(name)
///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2014-2015 $(my.name) developers (see COPYING).
//
//        GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY
//
///////////////////////////////////////////////////////////////////////////////
.endmacro copyleft
.endtemplate