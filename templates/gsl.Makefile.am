.template 0
###############################################################################
# Copyright (c) 2014-2015 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin Makefile.am.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

# Is the variable used for the first time in an optional section.
function is_dynamic_variable(product, variable, fixed)
    define my.product = is_dynamic_variable.product
    define my.was_fixed = map_exists(my.fixed, my.variable)
    define my.is_fixed = !is_optional_element(my.product)
    return !my.is_fixed & !my.was_fixed
endfunction

# TODO: is_another_variable_option(build, product, variable)
# Is the variable use in more than one product in the build.
function is_reused_variable(build, variable)
    define my.build = is_reused_variable.build
    define my.count = count(my.build.product,\
        get_automake_variable(count) = my.variable)
    return my.count > 1
endfunction

# Is there another product using CLEANFILES under different conditions?
function is_another_clean_files(build, product)
    define my.build = is_another_clean_files.build
    define my.product = is_another_clean_files.product
    define my.count = 0
    if (is_clean_files(my.product))
        my.count = count(my.build.product,\
            is_clean_files(count) & ((count.option ? "") <> my.product.option))
    endif
    return my.count > 0
endfunction

function initialize_dynamic_variables(heading, repository, mapper)
    define my.repository = initialize_dynamic_variables.repository
    define my.build = my.repository->build?
    if (defined(my.build))
        new fixed as _fixed
            define my.variables = ""
            for my.build.product as _product
                define my.variable = get_automake_variable(_product)
                if (is_dynamic_variable(_product, my.variable, _fixed))
                    if (is_reused_variable(my.build, my.variable))
                        my.variables += "$(my.variable) =\n"
                        map_add(my.mapper, my.variable)
                        if (is_test(_product))
                            my.variables += "TESTS =\n"
                            map_add(my.mapper, "TESTS")
                        endif
                    endif
                    if (is_another_clean_files(my.build, _product) &\
                        !map_exists(my.mapper, "CLEANFILES"))
                        my.variables += "CLEANFILES =\n"
                        map_add(my.mapper, "CLEANFILES")
                    endif
                endif
                map_add(_fixed, my.variable)
            endfor
            if (!is_empty(my.variables))
                heading1(my.heading)
                write_line(my.variables)
            endif
        endnew _fixed
    endif
endfunction

function initialize_variables()
    # Create a appearance-ordered list of distinct variable[:option] tuples.
    # Iterate the list and initialize any multiple-first-optional variable.
    # Multiple means more than one of the same variable (despite option).
    # Optional means there exists an option in the tuple.
    
    # Create a local scope to define properties as variable names.
    # Assign the option (or empty string) to each property.
endfunction

# Get an = or += depending on whether it's the first or later use.
function get_assignment_operator(mapper, variable)
    define my.found = map_exists(my.mapper, my.variable)
    return my.found ?? "+=" ? "="
endfunction

# Test for a prefix.
function match_prefix(product, prefix)
    define my.product = match_prefix.product
    require(my.product, "product", "prefix")
    return my.product.prefix = my.prefix
endfunction

# Test prefix for primary type (this is a simplified mapping).
function is_data(product)
    define my.product = is_data.product
    return match_prefix(my.product, "bash_completion") |\
    match_prefix(my.product, "doc") |\
    match_prefix(my.product, "pkgconfig") |\
    match_prefix(my.product, "jarexec") |\
    match_prefix(my.product, "sysconf")
endfunction
function is_headers(product)
    define my.product = is_headers.product
    return match_prefix(my.product, "include")
endfunction
function is_info(product)
    define my.product = is_info.product
    return match_prefix(my.product, "info")
endfunction
function is_java(product)
    define my.product = is_java.product
    return match_prefix(my.product, "javaexec")
endfunction
function is_jar(product)
    define my.product = is_jar.product
    # jar uses DATA but we wire it up as a product.
    return match_prefix(my.product, "jarexec")
endfunction
function is_library(product)
    define my.product = is_library.product
    return match_prefix(my.product, "lib") |\
        match_prefix(my.product, "pkgpyexec")
endfunction
function is_manual(product)
    define my.product = is_manual.product
    return match_prefix(my.product, "man")
endfunction
function is_program(product)
    define my.product = is_program.product
    return match_prefix(my.product, "bin")
endfunction
function is_python(product)
    define my.product = is_python.product
    return match_prefix(my.product, "pkgpython")
endfunction
function is_script(product)
    define my.product = is_script.product
    return match_prefix(my.product, "sbin")
endfunction

# Is the product allowed to be active only once?
function is_singleton(product)
    define my.product = is_singleton.product
    return is_java(my.product) | is_jar(my.product)
endfunction

# Does the product assign to the CLEANFILES variable.
function is_clean_files(product)
    define my.product = is_clean_files.product
    return is_java(my.product) | is_jar(my.product)
endfunction

# Is the product built from c/c++?
function is_cpp(product)
    define my.product = is_cpp.product
    return is_program(my.product) | is_library(my.product)
endfunction

# Is the product executable?
function is_executable(product)
    define my.product = is_executable.product
    return is_program(my.product) | is_script(my.product)
endfunction

# Is the product compiled?
function is_compiled(product)
    define my.product = is_compiled.product
    return is_cpp(my.product) | is_java(my.product)
endfunction

# Is the non-compiled product explicitly set to distribute?
function is_distribute(product)
    define my.product = is_distribute.product
    return defined(my.product.distribute) & is_true(my.product.distribute)
endfunction

# Is the non-compiled product explicitly set to not distribute?
function is_no_distribute(product)
    define my.product = is_no_distribute.product
    return defined(my.product.distribute) & !is_true(my.product.distribute)
endfunction

# Is the  product explicitly set to not install?
function is_no_install(product)
    define my.product = is_no_install.product
    return defined(my.product.install) & !is_true(my.product.install)
endfunction

# Is the product a test executable?
function is_test(product)
    define my.product = is_test.product
    if (!is_true(my.product.test) | is_executable(my.product))
        return is_true(my.product.test)
    endif
    abort "Tests must be executable: '$(my.product.prefix)'"
endfunction

# Is the product build for check purposes?
function is_check(product)
    define my.product = is_check.product
    return is_true(my.product.check) | is_test(my.product)
endfunction

# Map the prefix to the primary symbol (this is a simplified mapping).
function get_primary(product)
    define my.product = get_primary.product
    if (is_data(my.product))
        return "DATA"
    elsif (is_headers(my.product))
        return "HEADERS"
    elsif (is_java(my.product))
        return "JAVA"
    elsif (is_info(my.product))
        return "TEXINFOS"
    elsif (is_library(my.product))
        return "LTLIBRARIES"
    elsif (is_manual(my.product))
        return "MANS"
    elsif (is_program(my.product))
        return "PROGRAMS"
    elsif (is_python(my.product))
        return "PYTHON"
    elsif (is_script(my.product))
        return "SCRIPTS"
    endif
    abort "Unknown automake primary for prefix: '$(my.product.prefix)'"
endfunction

function get_qualified_prefix(product)
    define my.product = get_qualified_prefix.product
    require(my.product, "product", "prefix")
    define my.prefix = my.product.prefix
    define my.install = ""
    define my.distribute = ""

    # dist and nodist qualifications are mutually-exclusive and allow no check.
    if (!is_check(my.product))
        if (is_no_distribute(my.product))
            my.distribute = "nodist"
        elsif (is_distribute(my.product))
            my.distribute = "dist"
        endif
    endif
    
    # check and noinst qualifications are mutually-exclusive and use no prefix.
    if (is_check(my.product) | is_no_install(my.product))
        my.prefix = ""
        if (is_check(my.product))
            my.install = "check"
        elsif (is_no_install(my.product))
            my.install = "noinst"
        endif
    endif
    
    # join and return the non-empty parts
    return join(join(my.distribute, my.install, "_"), my.prefix, "_")
endfunction

# Does the file extension conform to the required prefix pattern?
function is_product_file(product, path)
    define my.product = is_product_file.product
    require(my.product, "product", "prefix")

    # doc expects no type and bash_completion and manual have no extension.
    if (is_data(my.product))
        if (match_prefix(my.product, "bash_completion"))
            return ends_with(my.path, "")
        elsif (match_prefix(my.product, "doc"))
            return ends_with(my.path, "")
        elsif (match_prefix(my.product, "pkgconfig"))
            return ends_with(my.path, ".pc")
        elsif (match_prefix(my.product, "sysconf"))
            return ends_with(my.path, ".cfg")
        endif
    elsif (is_cpp(my.product))
        return\
            ends_with(my.path, ".cpp") | ends_with(my.path, ".c") |\
            ends_with(my.path, ".hpp") | ends_with(my.path, ".h") |\
            ends_with(my.path, ".ipp")
    elsif (is_headers(my.product))
        return\
            ends_with(my.path, ".hpp") | ends_with(my.path, ".h") |\
            ends_with(my.path, ".ipp")
    elsif (is_info(my.product))
        return ends_with(my.path, ".texi")
    elsif (is_java(my.product))
        return ends_with(my.path, ".java")
    elsif (is_manual(my.product))
        return ends_with(my.path, "")
    elsif (is_python(my.product))
        return ends_with(my.path, ".py")
    elsif (is_script(my.product))
        return ends_with(my.path, ".sh")
    endif
    abort "Unknown product type for prefix: '$(my.product.prefix)'"
endfunction

# Get the target attribute, defaulting to [prefix]dir, bracketed as ${target}.
function get_target(product)
    require(my.product, "product", "prefix")
    define my.prefix = my.product.prefix
    
    # Workaround for failure of automake to properly handle noinst_JAVA.
    if (is_java(my.product) & is_no_install(my.product))
        my.prefix = "build"
    endif
    define my.target = "$(my.prefix)dir"
    return "${$(my.target)}"
endfunction

# Get the full install location.
function get_install(product, container)
    define my.product = get_install.product
    if (is_empty(my.container))
        my.container = my.product.container ?
    endif
    if (is_empty(my.container))
        return ""
    else
        my.container = "$(my.container)"
    endif
    define my.target = get_target(my.product)
    return "$(my.target)/$(my.container)"
endfunction

# Normalize the library name (as "[lib]name[.la]").
function get_library_name(library)
    define my.library = get_library_name.library
    define my.prefix = is_true(my.library.unprefixed) ?? "" ? "lib"
    return "$(my.prefix)$(my.library.name).la"
endfunction

# Normalize the product name.
function get_product_name(product)
    define my.product = get_product_name.product
    if (is_program(my.product))
        return my.product.name
    elsif (is_library(my.product))
        return get_library_name(my.product)
    endif
    return ""
endfunction

# Create the product path.
function get_product_path(product)
    define my.product = get_product_path.product
    return join(my.product.path, get_product_name(my.product))
endfunction

# Get a description for comments.
function get_product_description(product, container)
    define my.product = get_product_description.product
    define my.target = get_target(my.product)
    if (is_cpp(my.product))
        define my.path = get_product_path(my.product)
        if (is_check(my.product) | is_no_install(my.product))
            return "local: $(my.path)"
        endif
        return "$(my.path) => $(my.target)"
    elsif (is_jar(my.product))
        if (is_no_install(my.product))
            return "*.class => *.jar (local), requires ax_java_devel.m4"
        endif
        return "*.class => *.jar => $(my.target), requires ax_java_devel.m4"
    elsif (is_java(my.product))
        if (is_no_install(my.product))
            return "*.java => *.class (local), requires ax_java_devel.m4"
        endif
        return "*.java => *.class => $(my.target), requires ax_java_devel.m4"
    endif
    define my.install = get_install(my.product)
    if (is_empty(my.install))
        my.install = my.target
    endif
    return "files => $(my.install)"
endfunction

# Get automake tag of the form: qualified-prefix[_container]
function get_tag(product, container)
    define my.product = get_tag.product
    if (is_empty(my.container))
        my.container = my.product.container ? ""
    endif
    if (!is_empty(my.container))
        my.container = "_$(my.container:c)"
    endif
    define my.qualified_prefix = get_qualified_prefix(my.product)
    return "$(my.qualified_prefix)$(my.container)"
endfunction

# Get the automake library add output variable type.
function get_library_add(product)
    define my.product = get_library_add.product
    if (is_library(my.product))
        return "LIBADD"
    elsif (is_program(my.product))
        return "LDADD"
    endif
    abort "Unknown library type: '$(my.product.prefix)'"
endfunction

# Open and validate a directory.
function open_directory(folder)
    define my.directory = directory.open(my.folder, error_text) ?
    if (defined(my.directory))
        return my.directory
    endif
    abort "Directory enumeration failure: $(error_text)"
endfunction

# Test a directory and return the normalized path.
function normalize_directory(folder)
    define my.directory = open_directory(my.folder)
    return my.directory.path
endfunction

# Write the file names in the directory to a formatted string.
function get_files(folder, trim, product)
    define my.product = get_files.product
    my.files = ""
    define my.directory = open_directory(my.folder)
    for my.directory.file as _object by _object.path\
        where is_product_file(my.product, _object.name)
        define my.full = "$(_object.path)$(_object.name)"
        define my.relative = difference(my.full, my.trim)
        my.files += " \\\n    $(my.relative)"
    endfor
    return my.files
endfunction

# Recurse directory tree, returning the formatted paths in flat list.
function get_all_files(folder, trim, product)
    define my.product = get_all_files.product
    define my.files = get_files(my.folder, my.trim, my.product)
    define my.directory = open_directory(my.folder)
    for my.directory.directory as _object by _object.path
        define my.subfolder = "$(_object.path)$(_object.name)"
        my.files += get_all_files(my.subfolder, my.trim, my.product)
    endfor
    return my.files
endfunction

# Helper function for building a container segment.
function construct_segment(product, folder, trim)
    define my.product = construct_segment.product
    define my.segment = difference(my.folder, my.trim)
    define my.container = my.product.container ? ""
    return join(my.container, my.segment)
endfunction

# Recurse directory tree, rendering outputs with files for each folder.
function render_files_variables(folder, base_trim, path_trim, product, mapper)
    define my.product = render_files_variables.product
    require(my.product, "product", "prefix")
    define my.files = get_files(my.folder, my.base_trim, my.product)
    if (!is_empty(my.files))
        define my.trim = my.base_trim + my.path_trim + 1
        define my.segment = construct_segment(my.product, my.folder, my.trim)
        define my.tag = get_tag(my.product, my.segment)
        define my.install = get_install(my.product, my.segment)
        define my.variable = get_automake_variable(my.product, my.segment)
        define my.operator = get_assignment_operator(my.mapper, my.variable)

        # If the variable has no installdir we allow its accumulation.
        if (is_empty(my.install))
            map_add(my.mapper, my.variable)
        else
            # Don't write a tautology, such as: installdir = ${installdir}
            write_line("$(my.tag)dir = $(my.install)")
        endif
        write_line("$(my.variable) $(my.operator)$(my.files)\n")
    endif
 
    # Recurse the directory tree.
    define my.directory = open_directory(my.folder)
    for my.directory.directory as _object by _object.path
        define my.subfolder = "$(_object.path)$(_object.name)"
        render_files_variables(my.subfolder, my.base_trim, my.path_trim, my.product, my.mapper)
    endfor
endfunction

# Format the flag either as a literal flag or a dereferenced variable.
function get_flag(flag)
    define my.flag = get_flag.flag
    if (defined(my.flag.value))
        return "-$(my.flag.value)"
    elsif (defined(my.flag.define))
         return "-D$(my.flag.define:upper)=\\\"${$(my.flag.define)}\\\""
    elsif (defined(my.flag.substitute))
        return "${$(my.flag.substitute)}"
    endif
    abort "Required attribute missing: flag.value|define|substitute"
endfunction

# Get the product with the given library name.
function get_library_product(name, build)
    define my.build = get_library_product.build
    return my.build->product((product.name ? "") = my.name)
endfunction

# Render c/c++ specific option variables.
function render_cpp_variables(product, root, repository, mapper)
    define my.product = render_cpp_variables.product
    define my.repository = render_cpp_variables.repository
    
    if (is_cpp(my.product))
        define my.build = my.repository->build
        define my.configure = my.repository->configure
    
        define my.libs = ""
        define my.ld_flags = ""
        define my.ccc_flags = ""
        define my.cxx_flags = ""
        define my.cpp_flags = ""
        define my.sources = ""
        
        # Define _LDFLAGS from an override of Libtool default naming.
        if (is_true(my.product.unprefixed))
            my.ld_flags += " -module"
        endif

        # Define _CPPFLAGS values from input.
        for my.product.headers as _headers
            require(_headers, "headers", "path")
            my.cpp_flags += " -I${srcdir}/$(_headers.path)"
        endfor
        
        # Define _C??FLAGS values from input.
        for my.product.flag as _flag
            define my.flag = " $(get_flag(_flag))"
            if (is_ccc_flag(_flag))
                my.ccc_flags += my.flag
            elsif (is_cxx_flag(_flag))
                my.cxx_flags += my.flag
            elsif (is_cpp_flag(_flag))
                my.cpp_flags += my.flag
            else
                define my.context = my.flag.context ? ""
                abort "Invalid flag context: '$(my.context)'."
            endif
        endfor
        
        # Define _LIBS|_LDFLAGS|C??FLAGS option variables from libraries.
        for my.product.library as _library
            require(_library, "_library", "name")
            
            # TODO: recurse the referenced library (for libs only?).
            define my.built = get_library_product(_library.name, my.build) ?
            if (defined(my.built))
                define my.library_name = get_library_name(my.built)
                my.library_path = join(my.built.path, my.library_name)
                my.libs += " $(my.library_path)"
            else
                # pkg-config is problematic in that it mixes LDFLAGS into LIBS
                # and all flags into CFLAGS. We rewrite its CFLAGS as CPPFLAGS.
                define my.library_cname = "$(_library.name:c)"
                define my.is_language = is_java_dependency(_library) | is_python_dependency(_library)
                define my.is_boost = is_boost_dependency(_library)
                define my.is_boost_lib = is_boost_lib_dependency(_library)
                define my.is_packaged = is_packaged_library(_library.name, my.configure)
                if (!my.is_boost & !my.is_language)
                    my.libs += " ${$(my.library_cname)_LIBS}"
                endif
                if (!my.is_boost_lib)
                    my.cpp_flags += " ${$(my.library_cname)_CPPFLAGS}"
                endif
                if (!my.is_packaged & !my.is_boost & !my.is_boost_lib & !my.is_language)
                    my.ccc_flags += " ${$(my.library_cname)_CFLAGS}"
                endif
                if (!my.is_packaged & !my.is_boost_lib & !my.is_language)
                    my.ld_flags += " ${$(my.library_cname)_LDFLAGS}"
                endif
                #my.cxx_flags += " ${$(my.library_cname)_CXXFLAGS}"
            endif
        endfor
        
        # Define _SOURCES option variable from sources elements.
        for my.product.sources as _sources
            require(_sources, "sources", "path")
            define my.folder = "$(my.root)$(_sources.path)"
            define my.length = string.length(my.root)
            define my.sources += get_all_files(my.folder, my.length, my.product)
        endfor

        # Write TEST variable.
        define my.tag = get_tag(my.product)
        define my.primary = get_primary(my.product)
        define my.path = get_product_path(my.product)
        if (is_test(my.product))
            heading3("Execute '$(my.path)' as a test.")
            define my.variable = "TESTS"
            define my.operator = get_assignment_operator(my.mapper, my.variable)
            map_add(my.mapper, my.variable)
            write_line("TESTS $(my.operator) $(my.path)\n")
        endif
        
        # Write _PROGRAMS|_[LT]LIBRARIES variables.
        define my.variable = "$(my.tag)_$(my.primary)"
        define my.operator = get_assignment_operator(my.mapper, my.variable)
        map_add(my.mapper, my.variable)
        write_line("$(my.variable) $(my.operator) $(my.path)")
        
        # Write all cpp option variables.
        if (!is_empty(my.ccc_flags))
            write_line("$(my.path:c)_CFLAGS =$(my.ccc_flags)")
        endif
        if (!is_empty(my.cxx_flags))
            write_line("$(my.path:c)_CXXFLAGS =$(my.cxx_flags)")
        endif
        if (!is_empty(my.cpp_flags))
            write_line("$(my.path:c)_CPPFLAGS =$(my.cpp_flags)")
        endif
        if (!is_empty(my.ld_flags))
            write_line("$(my.path:c)_LDFLAGS =$(my.ld_flags)")
        endif
        if (!is_empty(my.libs))
            define my.add = get_library_add(my.product)
            write_line("$(my.path:c)_$(my.add) =$(my.libs)")
        endif
        if (!is_empty(my.sources))
            write_line("$(my.path:c)_SOURCES =$(my.sources)")
        endif
        write_line()
    endif
endfunction

# Render java specific variables: JAVA.
function render_java_variables(product, root, repository, mapper)
    define my.product = render_java_variables.product
    define my.repository = render_java_variables.repository
    if (is_java(my.product))
        define my.operator = get_assignment_operator(my.mapper, "CLEANFILES")
        map_add(my.mapper, "CLEANFILES")
        write_line("CLEANFILES $(my.operator) ${java_builddir}/*.class\n")
        write_line("distclean-local:")
        write_line("\t-rm -rf ${java_builddir} ${jar_builddir}\n")
    endif
endfunction

function get_java_stamp_variable(product)
    define my.product = get_java_stamp_variable.product
    define my.container = my.product.container?
    define my.prefix = is_empty(my.container) ?? "javaexec" ? ""
    define my.install = is_no_install(my.product) ?? "noinst" ? my.prefix
    return join(my.install, "$(my.container:c)", "_")
endfunction

function get_java_stamp(repository)
    define my.repository = get_java_stamp.repository
    define my.build = my.repository->build?
    if (defined(my.build))
        define my.java_product = my.build->product(prefix = "javaexec")?
        if (defined(my.java_product))
            define my.prefix = get_java_stamp_variable(my.java_product)
            return "class$(my.prefix).stamp"
        endif
    endif
    abort "The build is missing a required java product."
endfunction

function get_automake_variable(product, segment)
    define my.product = get_automake_variable.product
    define my.tag = get_tag(my.product, my.segment)
    return join(my.tag, get_primary(my.product), "_")
endfunction

# Render java specific variables: jar_DATA.
function render_jar_variables(product, root, repository, mapper)
    define my.product = render_jar_variables.product
    define my.repository = render_jar_variables.repository
    if (is_jar(my.product))
        define my.stamp = get_java_stamp(my.repository)
        define my.variable = get_automake_variable(my.product)
        define my.operator = get_assignment_operator(my.mapper, "CLEANFILES")
        map_add(my.mapper, "CLEANFILES")
        write_line("${$(my.variable)}: $(my.stamp)")
        write_line("\t${JAR} cf ${JARFLAGS} ${$(my.variable)} -C ${java_builddir} .\n")
        write_line("CLEANFILES $(my.operator) ${jar_builddir}/*.jar\n")
    endif
endfunction

# Render python specific variables: PYTHON.
function render_python_variables(product, root, repository, mapper)
    define my.product = render_python_variables.product
    define my.repository = render_python_variables.repository
    if (is_python(my.product))
        # TODO: add python features.
    endif
endfunction

function get_source_directory(product)
    define my.product = get_source_directory.product
    if (is_jar(my.product))
        return "${jar_builddir}"
    endif
    return ""
endfunction

function render_file_variables(product, mapper)
    define my.product = render_file_variables.product
    define my.file = ""
    define my.source = get_source_directory(my.product)
    for my.product.file as _file where !is_empty(_file.path) by _file.path
        require(_file, "file", "path")
        define my.path = join(my.source, _file.path)
        my.file += " \\\n    $(my.path)"
    endfor
    if (!is_empty(my.file))
        define my.tag = get_tag(my.product)
        define my.variable = get_automake_variable(my.product)
        define my.install = get_install(my.product, my.container)
        define my.operator = get_assignment_operator(my.mapper, my.variable)
        
        # If the variable has no installdir we allow its accumulation.
        if (is_empty(my.install))
            map_add(my.mapper, my.variable)
        else
            # Don't write a tautology, such as: installdir = ${installdir}.
            write_line("$(my.tag)dir = $(my.install)")
        endif
        write_line("$(my.variable) $(my.operator)$(my.file)\n")
    endif
endfunction
  
function render_product_variables(product, root, repository, mapper)
    define my.product = render_product_variables.product
    define my.repository = render_product_variables.repository
    
    # File elements are enumerated in metadata, just render them.
    render_file_variables(my.product, my.mapper)

    for my.product.files as _files where !is_empty(_files.path) by _files.path
        require(_files, "files", "path")
        define my.folder = "$(my.root)$(_files.path)"
        define my.root_length = string.length(my.root)
        define my.path_length = string.length(_files.path)
        
        # Files elements are enumerated by directory and mapped to targets.
        render_files_variables(my.folder, my.root_length, my.path_length, my.product, my.mapper)
    endfor
    
    render_cpp_variables(my.product, my.root, my.repository, my.mapper)
    render_java_variables(my.product, my.root, my.repository, my.mapper)
    render_jar_variables(my.product, my.root, my.repository, my.mapper)
    render_python_variables(my.product, my.root, my.repository, my.mapper)
endfunction
    
function render_product(product, root, repository, mapper)
    define my.product = render_product.product
    define my.repository = render_product.repository
    define my.configure = my.repository->configure
    define my.option = find_option_symbol(my.product, my.configure)?
    if (defined(my.option))
        write_line("if $(my.option:upper)\n")
    endif
    render_product_variables(my.product, my.root, my.repository, my.mapper)
    if (defined(my.option))
        write_line("endif $(my.option:upper)\n")
    endif
endfunction

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.macro initialize_automake()
.
# look for macros in the m4 subdirectory
ACLOCAL_AMFLAGS = -I m4

.endmacro # initialize_automake
.
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################

function generate_automake()
for generate.repository by name as _repository

    require(_repository, "repository", "name")
    define my.out_file = "$(_repository.name)/Makefile.am"
    notify(my.out_file)
    output(my.out_file)

    copyleft(_repository.name)
    define my.build = _repository->build?
    define my.base = "$(repositories_parent())/$(_repository.name)/"
    define my.root = normalize_directory(my.base)
    
    heading1("Standard declarations.")
    initialize_automake()
    
    new mapper as _mapper
        define my.heading1 = "Initialize initially conditional variables."
        initialize_dynamic_variables(my.heading1, _repository, _mapper)

        heading1("Automake products.")
        if (!defined(my.build))
            heading2("The repository/build element is not defined.")
        else
            for my.build.product as _product
                heading2(get_product_description(_product))
                render_product(_product, my.root, _repository, _mapper)
            endfor
        endif
    endnew _mapper
    
    close
endfor _repository
endfunction # generate_automake
.endtemplate