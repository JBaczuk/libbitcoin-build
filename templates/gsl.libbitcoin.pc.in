.template 0
###############################################################################
# Copyright (c) 2014-2015 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin.pc.in.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

# CFlags is a conflation of CFLAGS and CPPFLAGS, but not for CXXFLAGS.
function format_cflags(package)
    define my.package = format_cflags.package
    define my.compiler_flags = ""
    for my.package.cflag as _cflag
        my.compiler_flags += " $(_cflag.value)"
    endfor _cflag
    return trim_left(my.compiler_flags)
endfunction

# This is a simple list of tokens from the package element.
function format_libs(package)
    define my.package = format_libs.package
    define my.libs = ""
    for my.package.library as _library
        my.libs += " $(_library.name)"
    endfor _library
    return trim_left(my.libs)
endfunction

# TODO: pull from package[library].build instead of configure.
# Requires is a list of other packages.
# Conditional package definitions are always generated as substitutions.
function format_requires(configure)
    define my.configure = format_requires.configure
    define my.packages = ""
    for my.configure.dependency as _dependency where\
        is_linked_package_depedency(_dependency)
        my.packages += " @$(_dependency.name:c)_PKG@"
    endfor _dependency
    return trim_left(my.packages)
endfunction

# TODO: pull from package[library].build instead of configure.
# Libs is a conflation of LIBS and LDFLAGS.
function format_unpackaged_libs(configure)
    define my.configure = format_unpackaged_libs.configure
    define my.free_libs = ""
    for my.configure.dependency as _dependency\
        where is_unpackaged_lib(_dependency)
        
        # Unique by dependency.name, because of optionals.
        if !defined(my.lib_$(_dependency.name:c))
            define my.lib_$(_dependency.name:c) = 0
            my.free_libs += " @$(_dependency.name:c)_LIBS@"
        endif
    endfor _dependency
    return trim_left(my.free_libs)
endfunction

###############################################################################
# Generation
###############################################################################
.endtemplate
.template 1
.macro generate_pkgconfig()
.for generate.repository by name as _repository
.   if (!defined(_repository->package))
.       next _repository
.   endif
.   define my.out_file = "$(_repository.name)/$(_repository->package.name).pc.in"
.   notify(my.out_file)
.   output(my.out_file)
.   copyleft(_repository.name)
.   define my.configure = _repository->configure
.   define my.package = _repository->package

prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
includedir=@includedir@

Name: $(_repository->package.name)
Description: $(_repository->package.description)
URL: $(_repository->package.url)
Version: @PACKAGE_VERSION@

.# TODO: differentiate public vs. private dependencies.
# Our dependencies that publish package configuration.
Requires: $(format_requires(my.configure))

# Our own include directory and any other compiler flags we require.
Cflags: -I${includedir} $(format_cflags(my.package))

.# TODO: differentiate public vs. private libs.
# Our own lib directory, lib and any that do not publish package configuration.
Libs: -L${libdir} $(format_libs(my.package)) $(format_unpackaged_libs(my.configure))
.   close
.endfor _repository
.endmacro # generate_pkgconfig
.endtemplate